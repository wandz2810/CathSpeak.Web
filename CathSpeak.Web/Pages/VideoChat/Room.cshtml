@page "/VideoChat/Room/{roomId:int}"
@model CathSpeak.Web.Pages.VideoChat.RoomModel
@{
    ViewData["Title"] = "Room Video Chat";
}

<div class="start-call-container">
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="error-state">
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Unable to Start Room Session</h3>
            <p>@Model.ErrorMessage</p>
            <div class="error-actions">
                <a href="/VideoChat" class="btn btn-primary">Back to Video Chat</a>
                <a href="/Rooms" class="btn btn-outline">View Rooms</a>
            </div>
        </div>
    }
    else if (Model.Room != null)
    {
        <div class="call-preview">
            <div class="call-header">
                <h1><i class="fas fa-video"></i> Start Room Video Session</h1>
                <p>You're about to start a video session in @Model.Room.Name</p>
            </div>

            <div class="room-info">
                <div class="room-details">
                    <h2>@Model.Room.Name</h2>
                    <p class="room-description">@Model.Room.Description</p>
                    <p class="room-creator">Created by @Model.Room.CreatorName</p>
                </div>
            </div>

            <div class="device-check">
                <h3>Device Check</h3>
                <div class="check-items">
                    <div class="check-item" id="cameraCheck">
                        <i class="fas fa-camera"></i>
                        <span>Camera: <span id="cameraStatus">Checking...</span></span>
                    </div>
                    <div class="check-item" id="microphoneCheck">
                        <i class="fas fa-microphone"></i>
                        <span>Microphone: <span id="microphoneStatus">Checking...</span></span>
                    </div>
                </div>
                <video id="previewVideo" autoplay muted playsinline style="display: none;"></video>
            </div>

            <div class="call-actions">
                <form method="post" asp-page-handler="StartSession">
                    <button type="submit" class="btn btn-success btn-lg" id="startCallBtn" disabled>
                        <i class="fas fa-video"></i> Start Video Session
                    </button>
                </form>
                <a href="/Rooms" class="btn btn-outline btn-lg">
                    <i class="fas fa-arrow-left"></i> Back to Rooms
                </a>
            </div>
        </div>
    }
</div>

<style>
    .start-call-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .call-preview {
        background: white;
        border-radius: 20px;
        padding: 3rem;
        max-width: 600px;
        width: 100%;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

    .call-header {
        margin-bottom: 2rem;
    }

        .call-header h1 {
            color: #333;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .call-header p {
            color: #666;
            margin: 0;
        }

    .room-info {
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 15px;
        text-align: left;
    }

    .room-details h2 {
        margin: 0 0 1rem 0;
        color: #333;
    }

    .room-description {
        color: #555;
        margin-bottom: 0.5rem;
    }

    .room-creator {
        color: #777;
        font-size: 0.9rem;
    }

    .device-check {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }

    .check-items {
        display: flex;
        justify-content: center;
        gap: 2rem;
    }

    .check-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #666;
    }

        .check-item.success {
            color: #28a745;
        }

        .check-item.error {
            color: #dc3545;
        }

    .call-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
    }

    .btn {
        padding: 1rem 2rem;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
        font-size: 1.1rem;
        transition: all 0.2s ease;
    }

    .btn-success:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    .error-state {
        background: white;
        border-radius: 20px;
        padding: 3rem;
        max-width: 500px;
        text-align: center;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', async function() {
        const startCallBtn = document.getElementById('startCallBtn');
        const cameraStatus = document.getElementById('cameraStatus');
        const microphoneStatus = document.getElementById('microphoneStatus');
        const cameraCheck = document.getElementById('cameraCheck');
        const microphoneCheck = document.getElementById('microphoneCheck');
        const previewVideo = document.getElementById('previewVideo');

        let cameraOk = false;
        let microphoneOk = false;

        try {
            // Check camera and microphone access
            const stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            });

            // Camera check
            const videoTracks = stream.getVideoTracks();
            if (videoTracks.length > 0) {
                cameraStatus.textContent = 'Ready';
                cameraCheck.classList.add('success');
                cameraOk = true;

                // Show preview
                previewVideo.srcObject = stream;
                previewVideo.style.display = 'block';
                previewVideo.style.width = '200px';
                previewVideo.style.height = '150px';
                previewVideo.style.borderRadius = '10px';
                previewVideo.style.margin = '1rem auto';
            }

            // Microphone check
            const audioTracks = stream.getAudioTracks();
            if (audioTracks.length > 0) {
                microphoneStatus.textContent = 'Ready';
                microphoneCheck.classList.add('success');
                microphoneOk = true;
            }

            // Stop the stream after checking
            setTimeout(() => {
                stream.getTracks().forEach(track => track.stop());
                previewVideo.style.display = 'none';
            }, 3000);

        } catch (error) {
            console.error('Error accessing media devices:', error);
            cameraStatus.textContent = 'Not Available';
            microphoneStatus.textContent = 'Not Available';
            cameraCheck.classList.add('error');
            microphoneCheck.classList.add('error');
        }

        // Enable start button if both devices are ready
        function updateStartButton() {
            if (cameraOk && microphoneOk) {
                startCallBtn.disabled = false;
                startCallBtn.innerHTML = '<i class="fas fa-video"></i> Start Video Session';
            } else {
                startCallBtn.disabled = true;
                startCallBtn.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Device Check Failed';
            }
        }

        setTimeout(updateStartButton, 1000);
    });
</script>