@page "/VideoChat/StartOneOnOne/{friendId:int}"
@model CathSpeak.Web.Pages.VideoChat.StartOneOnOneModel
@{
    ViewData["Title"] = "Start Video Call";
}

<div class="start-call-container">
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="error-state">
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Unable to Start Call</h3>
            <p>@Model.ErrorMessage</p>
            <div class="error-actions">
                <a href="/VideoChat" class="btn btn-primary">Back to Video Chat</a>
                <a href="/Friends" class="btn btn-outline">View Friends</a>
            </div>
        </div>
    }
    else if (Model.Friend != null)
    {
        <div class="call-preview">
            <div class="call-header">
                <h1><i class="fas fa-video"></i> Start Video Call</h1>
                <p>You're about to start a video call with your friend</p>
            </div>

            <div class="friend-info">
                <img src="@(Model.Friend.AvatarImageUrl ?? "/images/default-avatar.png")"
                     alt="@Model.Friend.Username" class="friend-avatar" />
                <div class="friend-details">
                    <h2>@Model.Friend.Username</h2>
                    <p class="friend-level">@Model.Friend.Level Level</p>
                    @if (!string.IsNullOrEmpty(Model.Friend.Address))
                    {
                        <p class="friend-location"><i class="fas fa-map-marker-alt"></i> @Model.Friend.Address</p>
                    }
                </div>
            </div>

            <div class="call-info">
                <div class="info-item">
                    <i class="fas fa-video"></i>
                    <div>
                        <h4>High Quality Video</h4>
                        <p>Crystal clear video calling for the best learning experience</p>
                    </div>
                </div>
                <div class="info-item">
                    <i class="fas fa-microphone"></i>
                    <div>
                        <h4>Clear Audio</h4>
                        <p>Noise cancellation and echo reduction for better conversation</p>
                    </div>
                </div>
                <div class="info-item">
                    <i class="fas fa-comments"></i>
                    <div>
                        <h4>Chat During Call</h4>
                        <p>Send text messages during your video conversation</p>
                    </div>
                </div>
            </div>

            <div class="device-check">
                <h3>Device Check</h3>
                <div class="check-items">
                    <div class="check-item" id="cameraCheck">
                        <i class="fas fa-camera"></i>
                        <span>Camera: <span id="cameraStatus">Checking...</span></span>
                    </div>
                    <div class="check-item" id="microphoneCheck">
                        <i class="fas fa-microphone"></i>
                        <span>Microphone: <span id="microphoneStatus">Checking...</span></span>
                    </div>
                </div>
                <video id="previewVideo" autoplay muted playsinline style="display: none;"></video>
            </div>

            <div class="call-actions">
                <form method="post" asp-page-handler="StartCall">
                    <button type="submit" class="btn btn-success btn-lg" id="startCallBtn" disabled>
                        <i class="fas fa-video"></i> Start Video Call
                    </button>
                </form>
                <a href="/Friends" class="btn btn-outline btn-lg">
                    <i class="fas fa-arrow-left"></i> Back to Friends
                </a>
            </div>
        </div>
    }
</div>

<style>
    .start-call-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .call-preview {
        background: white;
        border-radius: 20px;
        padding: 3rem;
        max-width: 600px;
        width: 100%;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

    .call-header {
        margin-bottom: 2rem;
    }

        .call-header h1 {
            color: #333;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .call-header p {
            color: #666;
            margin: 0;
        }

    .friend-info {
        display: flex;
        align-items: center;
        gap: 1.5rem;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 15px;
    }

    .friend-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid #667eea;
    }

    .friend-details {
        text-align: left;
        flex: 1;
    }

        .friend-details h2 {
            margin: 0 0 0.5rem 0;
            color: #333;
        }

    .friend-level {
        color: #667eea;
        font-weight: 600;
        margin: 0 0 0.25rem 0;
    }

    .friend-location {
        color: #666;
        margin: 0;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .call-info {
        margin-bottom: 2rem;
    }

    .info-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        text-align: left;
        margin-bottom: 0.5rem;
    }

        .info-item i {
            width: 40px;
            height: 40px;
            background: #667eea;
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

        .info-item h4 {
            margin: 0 0 0.25rem 0;
            color: #333;
        }

        .info-item p {
            margin: 0;
            color: #666;
            font-size: 0.9rem;
        }

    .device-check {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }

        .device-check h3 {
            margin: 0 0 1rem 0;
            color: #333;
        }

    .check-items {
        display: flex;
        justify-content: center;
        gap: 2rem;
    }

    .check-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #666;
    }

        .check-item.success {
            color: #28a745;
        }

        .check-item.error {
            color: #dc3545;
        }

    .call-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
    }

    .btn {
        padding: 1rem 2rem;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
        font-size: 1.1rem;
        transition: all 0.2s ease;
    }

    .btn-lg {
        padding: 1.25rem 2.5rem;
    }

    .btn-success {
        background: #28a745;
        color: white;
    }

        .btn-success:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

    .btn-outline {
        background: transparent;
        border: 2px solid #ddd;
        color: #666;
    }

    .btn:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .error-state {
        background: white;
        border-radius: 20px;
        padding: 3rem;
        max-width: 500px;
        text-align: center;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
    }

        .error-state i {
            font-size: 4rem;
            color: #dc3545;
            margin-bottom: 1rem;
        }

        .error-state h3 {
            color: #333;
            margin-bottom: 1rem;
        }

        .error-state p {
            color: #666;
            margin-bottom: 2rem;
        }

    .error-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    @@media (max-width: 768px) {
        .call-preview

    {
        padding: 2rem;
    }

    .friend-info {
        flex-direction: column;
        text-align: center;
    }

    .friend-details {
        text-align: center;
    }

    .check-items {
        flex-direction: column;
        gap: 1rem;
    }

    .call-actions {
        flex-direction: column;
    }

    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', async function() {
        const startCallBtn = document.getElementById('startCallBtn');
        const cameraStatus = document.getElementById('cameraStatus');
        const microphoneStatus = document.getElementById('microphoneStatus');
        const cameraCheck = document.getElementById('cameraCheck');
        const microphoneCheck = document.getElementById('microphoneCheck');
        const previewVideo = document.getElementById('previewVideo');

        let cameraOk = false;
        let microphoneOk = false;

        try {
            // Check camera and microphone access
            const stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            });

            // Camera check
            const videoTracks = stream.getVideoTracks();
            if (videoTracks.length > 0) {
                cameraStatus.textContent = 'Ready';
                cameraCheck.classList.add('success');
                cameraOk = true;

                // Show preview
                previewVideo.srcObject = stream;
                previewVideo.style.display = 'block';
                previewVideo.style.width = '200px';
                previewVideo.style.height = '150px';
                previewVideo.style.borderRadius = '10px';
                previewVideo.style.margin = '1rem auto';
            }

            // Microphone check
            const audioTracks = stream.getAudioTracks();
            if (audioTracks.length > 0) {
                microphoneStatus.textContent = 'Ready';
                microphoneCheck.classList.add('success');
                microphoneOk = true;
            }

            // Stop the stream after checking
            setTimeout(() => {
                stream.getTracks().forEach(track => track.stop());
                previewVideo.style.display = 'none';
            }, 3000);

        } catch (error) {
            console.error('Error accessing media devices:', error);

            cameraStatus.textContent = 'Not Available';
            microphoneStatus.textContent = 'Not Available';
            cameraCheck.classList.add('error');
            microphoneCheck.classList.add('error');
        }

        // Enable start button if both devices are ready
        function updateStartButton() {
            if (cameraOk && microphoneOk) {
                startCallBtn.disabled = false;
                startCallBtn.textContent = 'Start Video Call';
            } else {
                startCallBtn.disabled = true;
                startCallBtn.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Device Check Failed';
            }
        }

        setTimeout(updateStartButton, 1000);
    });
</script>