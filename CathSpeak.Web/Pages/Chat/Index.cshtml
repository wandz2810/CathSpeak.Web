@page
@model CathSpeak.Web.Pages.Chat.IndexModel
@{
    ViewData["Title"] = "Chat";
}

<div class="chat-container">
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i>
            @Model.ErrorMessage
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i>
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="chat-layout">
        <!-- Conversations Sidebar -->
        <div class="conversations-sidebar">
            <div class="sidebar-header">
                <h2><i class="fas fa-comments"></i> Chats</h2>
                <button class="btn btn-primary btn-sm" onclick="toggleNewChatModal()">
                    <i class="fas fa-plus"></i> New Chat
                </button>
            </div>

            <div class="conversations-list">
                @if (Model.Conversations.Any())
                {
                    @foreach (var conversation in Model.Conversations)
                    {
                        <a href="/Chat?conversationId=@conversation.ConversationId"
                           class="conversation-item @(Model.SelectedConversation?.ConversationId == conversation.ConversationId ? "active" : "")">
                            <img src="@(conversation.Friend.AvatarImageUrl ?? "/images/default-avatar.png")"
                                 alt="@conversation.Friend.Username" class="conversation-avatar" />
                            <div class="conversation-info">
                                <div class="conversation-header">
                                    <span class="friend-name">@conversation.Friend.Username</span>
                                    @if (conversation.LastMessageTime.HasValue)
                                    {
                                        <span class="message-time">@conversation.LastMessageTime.Value.ToString("HH:mm")</span>
                                    }
                                </div>
                                <div class="last-message">
                                    @if (!string.IsNullOrEmpty(conversation.LastMessage))
                                    {
                                        <span>@conversation.LastMessage</span>
                                    }
                                    else
                                    {
                                        <span class="no-messages">No messages yet</span>
                                    }
                                </div>
                            </div>
                        </a>
                    }
                }
                else
                {
                    <div class="empty-conversations">
                        <i class="fas fa-comment-slash"></i>
                        <p>No conversations yet</p>
                        <p>Start chatting with your friends!</p>
                    </div>
                }
            </div>
        </div>

        <!-- Chat Area -->
        <div class="chat-area">
            @if (Model.SelectedConversation != null)
            {
                <!-- Chat Header -->
                <div class="chat-header">
                    <div class="chat-user-info">
                        <img src="@(Model.SelectedConversation.Friend.AvatarImageUrl ?? "/images/default-avatar.png")"
                             alt="@Model.SelectedConversation.Friend.Username" class="chat-avatar" />
                        <div class="user-details">
                            <h3>@Model.SelectedConversation.Friend.Username</h3>
                            <p>@Model.SelectedConversation.Friend.Level Level • Online</p>
                        </div>
                    </div>
                    <div class="chat-actions">
                        <button class="btn btn-outline" onclick="startVideoCall(@Model.SelectedConversation.Friend.AccountId)">
                            <i class="fas fa-video"></i> Video Call
                        </button>
                    </div>
                </div>

                <!-- Messages Area -->
                <div class="messages-area" id="messagesArea">
                    @if (Model.Messages.Any())
                    {
                        @foreach (var message in Model.Messages.OrderBy(m => m.CreateDate))
                        {
                            var isCurrentUser = message.Sender.Username == User.Identity?.Name;
                            <div class="message @(isCurrentUser ? "sent" : "received")">
                                @if (!isCurrentUser)
                                {
                                    <img src="@(message.Sender.AvatarImageUrl ?? "/images/default-avatar.png")"
                                         alt="@message.Sender.Username" class="message-avatar" />
                                }
                                <div class="message-content">
                                    <div class="message-bubble">
                                        <p>@message.MessageContent</p>
                                    </div>
                                    <div class="message-meta">
                                        <span class="message-time">@message.CreateDate.ToString("HH:mm")</span>
                                        @if (isCurrentUser && message.IsRead)
                                        {
                                            <span class="read-indicator">
                                                <i class="fas fa-check-double"></i>
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-messages">
                            <i class="fas fa-comments"></i>
                            <p>No messages yet</p>
                            <p>Start the conversation with @Model.SelectedConversation.Friend.Username!</p>
                        </div>
                    }
                </div>

                <!-- Message Input -->
                <div class="message-input-area">
                    <form method="post" asp-page-handler="SendMessage" class="message-form">
                        <input type="hidden" asp-for="SelectedConversationId" value="@Model.SelectedConversation.ConversationId" />
                        <div class="input-group">
                            <input asp-for="NewMessage" class="message-input"
                                   placeholder="Type your message..." autocomplete="off" />
                            <button type="submit" class="send-btn">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </form>
                </div>
            }
            else
            {
                <!-- No Conversation Selected -->
                <div class="no-conversation-selected">
                    <i class="fas fa-comment-dots"></i>
                    <h3>Welcome to CathSpeak Chat</h3>
                    <p>Select a conversation to start chatting, or create a new conversation with your friends.</p>
                    @if (Model.Friends.Any())
                    {
                        <button class="btn btn-primary" onclick="toggleNewChatModal()">
                            <i class="fas fa-plus"></i> Start New Conversation
                        </button>
                    }
                    else
                    {
                        <a href="/Friends/Search" class="btn btn-primary">
                            <i class="fas fa-user-plus"></i> Find Friends to Chat With
                        </a>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- New Chat Modal -->
<div id="newChatModal" class="modal" style="display: none;">
    <div class="modal-content">
        <div class="modal-header">
            <h3><i class="fas fa-plus"></i> Start New Conversation</h3>
            <button class="close-btn" onclick="toggleNewChatModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            @if (Model.Friends.Any())
            {
                <p>Choose a friend to start chatting with:</p>
                <div class="friends-list">
                    @foreach (var friend in Model.Friends)
                    {
                        <form method="post" asp-page-handler="CreateConversation" style="display: inline;">
                            <input type="hidden" name="friendId" value="@friend.AccountId" />
                            <button type="submit" class="friend-option">
                                <img src="@(friend.AvatarImageUrl ?? "/images/default-avatar.png")"
                                     alt="@friend.Username" class="friend-avatar" />
                                <div class="friend-info">
                                    <span class="friend-name">@friend.Username</span>
                                    <span class="friend-level">@friend.Level Level</span>
                                </div>
                            </button>
                        </form>
                    }
                </div>
            }
            else
            {
                <div class="no-friends">
                    <i class="fas fa-user-friends"></i>
                    <p>You don't have any friends yet.</p>
                    <a href="/Friends/Search" class="btn btn-primary">Find Friends</a>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .chat-container {
        height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .chat-layout {
        display: grid;
        grid-template-columns: 350px 1fr;
        height: calc(100vh - 76px);
        overflow: hidden;
    }

    @@media (max-width: 768px) {
        .chat-layout

    {
        grid-template-columns: 1fr;
    }

    .conversations-sidebar {
        display: none;
    }

    }

    .conversations-sidebar {
        background: white;
        border-right: 1px solid #e1e5e9;
        display: flex;
        flex-direction: column;
    }

    .sidebar-header {
        padding: 1.5rem;
        border-bottom: 1px solid #e1e5e9;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .sidebar-header h2 {
            margin: 0;
            color: #333;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .conversations-list {
        flex: 1;
        overflow-y: auto;
    }

    .conversation-item {
        display: flex;
        align-items: center;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #f0f0f0;
        text-decoration: none;
        color: inherit;
        transition: background-color 0.2s ease;
    }

        .conversation-item:hover {
            background-color: #f8f9fa;
        }

        .conversation-item.active {
            background-color: #e3f2fd;
            border-right: 3px solid #667eea;
        }

    .conversation-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 1rem;
    }

    .conversation-info {
        flex: 1;
        min-width: 0;
    }

    .conversation-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.25rem;
    }

    .friend-name {
        font-weight: 600;
        color: #333;
    }

    .message-time {
        font-size: 0.8rem;
        color: #666;
    }

    .last-message {
        font-size: 0.9rem;
        color: #666;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .no-messages {
        color: #999 !important;
        font-style: italic;
    }

    .empty-conversations {
        text-align: center;
        padding: 3rem 1.5rem;
        color: #666;
    }

        .empty-conversations i {
            font-size: 3rem;
            color: #ddd;
            margin-bottom: 1rem;
        }

    .chat-area {
        display: flex;
        flex-direction: column;
        height: 100%;
        background: #f5f5f5;
    }

    .chat-header {
        background: white;
        padding: 1rem 2rem;
        border-bottom: 1px solid #e1e5e9;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chat-user-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .chat-avatar {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        object-fit: cover;
    }

    .user-details h3 {
        margin: 0;
        color: #333;
        font-size: 1.1rem;
    }

    .user-details p {
        margin: 0.25rem 0 0 0;
        color: #666;
        font-size: 0.9rem;
    }

    .messages-area {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .message {
        display: flex;
        align-items: flex-end;
        gap: 0.5rem;
        max-width: 70%;
    }

        .message.sent {
            align-self: flex-end;
            flex-direction: row-reverse;
        }

        .message.received {
            align-self: flex-start;
        }

    .message-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }

    .message-content {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .message.sent .message-content {
        align-items: flex-end;
    }

    .message.received .message-content {
        align-items: flex-start;
    }

    .message-bubble {
        padding: 0.75rem 1rem;
        border-radius: 18px;
        max-width: 100%;
        word-wrap: break-word;
    }

    .message.sent .message-bubble {
        background: #667eea;
        color: white;
    }

    .message.received .message-bubble {
        background: white;
        color: #333;
        border: 1px solid #e1e5e9;
    }

    .message-bubble p {
        margin: 0;
        line-height: 1.4;
    }

    .message-meta {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.8rem;
        color: #666;
    }

    .read-indicator {
        color: #667eea;
    }

    .no-messages {
        text-align: center;
        padding: 3rem;
        color: #666;
    }

        .no-messages i {
            font-size: 3rem;
            color: #ddd;
            margin-bottom: 1rem;
        }

    .no-conversation-selected {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        padding: 2rem;
        color: #666;
        text-align: center;
    }

        .no-conversation-selected i {
            font-size: 4rem;
            color: #ddd;
            margin-bottom: 1rem;
        }

    .message-input-area {
        background: white;
        padding: 1rem 2rem;
        border-top: 1px solid #e1e5e9;
    }

    .input-group {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .message-input {
        flex: 1;
        padding: 0.75rem 1rem;
        border: 1px solid #ddd;
        border-radius: 25px;
        font-size: 1rem;
        outline: none;
    }

        .message-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
        }

    .send-btn {
        width: 45px;
        height: 45px;
        border: none;
        border-radius: 50%;
        background: #667eea;
        color: white;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s;
    }

        .send-btn:hover {
            background: #5a6fd8;
        }

    /* Modal Styles */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        border-radius: 10px;
        max-width: 500px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
    }

    .modal-header {
        padding: 1.5rem;
        border-bottom: 1px solid #e1e5e9;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .modal-header h3 {
            margin: 0;
            color: #333;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .close-btn {
        background: none;
        border: none;
        font-size: 1.2rem;
        color: #666;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
    }

        .close-btn:hover {
            background: #f0f0f0;
        }

    .modal-body {
        padding: 1.5rem;
    }

    .friends-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .friend-option {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        border: 1px solid #e1e5e9;
        border-radius: 8px;
        background: white;
        cursor: pointer;
        transition: background-color 0.2s;
        width: 100%;
        text-align: left;
    }

        .friend-option:hover {
            background: #f8f9fa;
        }

    .friend-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }

    .friend-info {
        flex: 1;
    }

    .friend-name {
        display: block;
        font-weight: 500;
        color: #333;
    }

    .friend-level {
        display: block;
        font-size: 0.9rem;
        color: #666;
    }

    .no-friends {
        text-align: center;
        padding: 2rem;
        color: #666;
    }

        .no-friends i {
            font-size: 3rem;
            color: #ddd;
            margin-bottom: 1rem;
        }

    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.8rem;
    }

    .btn-primary {
        background: #667eea;
        color: white;
    }

    .btn-outline {
        background: transparent;
        border: 1px solid #ddd;
        color: #666;
    }

    .alert {
        padding: 1rem;
        border-radius: 5px;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .alert-danger {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
</style>

<!-- SignalR for real-time messaging -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const conversationId = @(Model.SelectedConversation?.ConversationId ?? 0);
        const messagesArea = document.getElementById('messagesArea');
        const messageInput = document.querySelector('.message-input');

        // Auto-scroll to bottom
        if (messagesArea) {
            messagesArea.scrollTop = messagesArea.scrollHeight;
        }

        // Focus on input
        if (messageInput) {
            messageInput.focus();
        }

        // SignalR connection for real-time messaging
        if (conversationId > 0) {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/chat")
                .build();

            connection.start().then(function () {
                console.log('Connected to ChatHub');
                connection.invoke("JoinConversation", conversationId);
            }).catch(function (err) {
                console.error('Error connecting to ChatHub:', err);
            });

            // Handle incoming messages
            connection.on("ReceiveMessage", function(message) {
                // Reload page to show new message
                // In a production app, you'd dynamically add the message to the DOM
                location.reload();
            });
        }

        // Auto-refresh every 30 seconds for new messages
        setInterval(function() {
            if (!document.hidden && conversationId > 0) {
                location.reload();
            }
        }, 30000);
    });

    function toggleNewChatModal() {
        const modal = document.getElementById('newChatModal');
        modal.style.display = modal.style.display === 'none' ? 'flex' : 'none';
    }

    function startVideoCall(friendId) {
        window.location.href = `/VideoChat/StartOneOnOne/${friendId}`;
    }

    // Close modal when clicking outside
    document.getElementById('newChatModal')?.addEventListener('click', function(e) {
        if (e.target === this) {
            toggleNewChatModal();
        }
    });
</script>