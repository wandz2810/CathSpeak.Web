@page "/Chat/Conversation/{conversationId:int}"
@model CathSpeak.Web.Pages.Chat.ConversationModel
@{
    ViewData["Title"] = "Chat";
}

<div class="chat-container">
    @if (Model.Conversation != null)
    {
        <div class="chat-header">
            <div class="chat-user-info">
                <img src="@(Model.Conversation.Friend.AvatarImageUrl ?? "/images/default-avatar.png")"
                     alt="@Model.Conversation.Friend.Username" class="chat-avatar" />
                <div class="user-details">
                    <h2>@Model.Conversation.Friend.Username</h2>
                    <p>@Model.Conversation.Friend.Level Level • Online</p>
                </div>
            </div>
            <div class="chat-actions">
                <button class="btn btn-outline" onclick="startVideoCall(@Model.Conversation.Friend.AccountId)">
                    <i class="fas fa-video"></i> Video Call
                </button>
                <a href="/Chat" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back
                </a>
            </div>
        </div>

        <div class="chat-messages" id="chatMessages">
            @if (Model.Messages.Any())
            {
                @foreach (var message in Model.Messages.OrderBy(m => m.CreateDate))
                {
                    var isCurrentUser = message.Sender.Username == User.Identity?.Name;
                    <div class="message @(isCurrentUser ? "sent" : "received")">
                        @if (!isCurrentUser)
                        {
                            <img src="@(message.Sender.AvatarImageUrl ?? "/images/default-avatar.png")"
                                 alt="@message.Sender.Username" class="message-avatar" />
                        }
                        <div class="message-content">
                            <div class="message-bubble">
                                <p>@message.MessageContent</p>
                            </div>
                            <div class="message-meta">
                                <span class="message-time">@message.CreateDate.ToString("HH:mm")</span>
                                @if (isCurrentUser && message.IsRead)
                                {
                                    <span class="read-indicator">
                                        <i class="fas fa-check-double"></i>
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-messages">
                    <i class="fas fa-comments"></i>
                    <p>No messages yet. Start the conversation!</p>
                </div>
            }
        </div>

        <div class="chat-input-area">
            <form method="post" asp-page-handler="SendMessage" class="chat-form">
                <div class="input-group">
                    <input asp-for="NewMessage" class="chat-input"
                           placeholder="Type your message..." autocomplete="off" />
                    <button type="submit" class="send-btn">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </form>
        </div>
    }
    else
    {
        <div class="error-state">
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Conversation not found</h3>
            <p>The conversation you're looking for doesn't exist or you don't have access to it.</p>
            <a href="/Chat" class="btn btn-primary">Back to Chats</a>
        </div>
    }
</div>

<style>
    .chat-container {
        height: 100vh;
        display: grid;
        grid-template-rows: auto 1fr auto;
        background: #f5f5f5;
    }

    .chat-header {
        background: white;
        padding: 1rem 2rem;
        border-bottom: 1px solid #e1e5e9;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chat-user-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .chat-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
    }

    .user-details h2 {
        margin: 0;
        color: #333;
        font-size: 1.2rem;
    }

    .user-details p {
        margin: 0.25rem 0 0 0;
        color: #666;
        font-size: 0.9rem;
    }

    .chat-actions {
        display: flex;
        gap: 0.5rem;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .message {
        display: flex;
        align-items: flex-end;
        gap: 0.5rem;
        max-width: 70%;
    }

        .message.sent {
            align-self: flex-end;
            flex-direction: row-reverse;
        }

        .message.received {
            align-self: flex-start;
        }

    .message-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }

    .message-content {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .message.sent .message-content {
        align-items: flex-end;
    }

    .message.received .message-content {
        align-items: flex-start;
    }

    .message-bubble {
        padding: 0.75rem 1rem;
        border-radius: 18px;
        max-width: 100%;
        word-wrap: break-word;
    }

    .message.sent .message-bubble {
        background: #667eea;
        color: white;
    }

    .message.received .message-bubble {
        background: white;
        color: #333;
        border: 1px solid #e1e5e9;
    }

    .message-bubble p {
        margin: 0;
        line-height: 1.4;
    }

    .message-meta {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.8rem;
        color: #666;
    }

    .read-indicator {
        color: #667eea;
    }

    .chat-input-area {
        background: white;
        padding: 1rem 2rem;
        border-top: 1px solid #e1e5e9;
    }

    .chat-form {
        max-width: 100%;
    }

    .input-group {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .chat-input {
        flex: 1;
        padding: 0.75rem 1rem;
        border: 1px solid #ddd;
        border-radius: 25px;
        font-size: 1rem;
        outline: none;
    }

        .chat-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
        }

    .send-btn {
        width: 45px;
        height: 45px;
        border: none;
        border-radius: 50%;
        background: #667eea;
        color: white;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s;
    }

        .send-btn:hover {
            background: #5a6fd8;
        }

    .no-messages {
        text-align: center;
        padding: 3rem;
        color: #666;
    }

        .no-messages i {
            font-size: 3rem;
            color: #ddd;
            margin-bottom: 1rem;
        }

    .error-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        padding: 2rem;
        color: #666;
    }

        .error-state i {
            font-size: 4rem;
            color: #ddd;
            margin-bottom: 1rem;
        }

    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
    }

    .btn-outline {
        background-color: transparent;
        border: 1px solid #ddd;
        color: #666;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-primary {
        background-color: #667eea;
        color: white;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .chat-header

    {
        padding: 1rem;
    }

    .chat-actions {
        flex-direction: column;
        gap: 0.25rem;
    }

    .message {
        max-width: 85%;
    }

    .chat-input-area {
        padding: 1rem;
    }

    }
</style>

<!-- SignalR for real-time messaging -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const conversationId = @Model.ConversationId;
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.querySelector('.chat-input');

        // SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/chat")
            .build();

        // Start SignalR connection
        connection.start().then(function () {
            console.log('Connected to ChatHub');
            connection.invoke("JoinConversation", conversationId);
        }).catch(function (err) {
            console.error('Error connecting to ChatHub:', err);
        });

        // Handle incoming messages
        connection.on("ReceiveMessage", function(message) {
            const currentUser = '@User.Identity?.Name';
            const isCurrentUser = message.sender.username === currentUser;

            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isCurrentUser ? 'sent' : 'received'}`;

            messageDiv.innerHTML = `
                ${!isCurrentUser ? `<img src="${message.sender.avatarImageUrl || '/images/default-avatar.png'}" alt="${message.sender.username}" class="message-avatar" />` : ''}
                <div class="message-content">
                    <div class="message-bubble">
                        <p>${message.messageContent}</p>
                    </div>
                    <div class="message-meta">
                        <span class="message-time">${new Date(message.createDate).toLocaleTimeString('en-US', {hour: '2-digit', minute: '2-digit'})}</span>
                        ${isCurrentUser && message.isRead ? '<span class="read-indicator"><i class="fas fa-check-double"></i></span>' : ''}
                    </div>
                </div>
            `;

            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });

        // Auto-scroll to bottom on page load
        chatMessages.scrollTop = chatMessages.scrollHeight;

        // Focus on input
        messageInput.focus();

        // Auto-refresh every 30 seconds to get new messages
        setInterval(function() {
            if (!document.hidden) {
                location.reload();
            }
        }, 30000);
    });

    function startVideoCall(friendId) {
        // Redirect to video chat with friend
        window.location.href = `/VideoChat/StartOneOnOne/${friendId}`;
    }
</script>